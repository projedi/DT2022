\import Data.List
\import Function.Meta
\import Order.LinearOrder
\import Paths.Meta
\import Utils (==<, >==, Either, Maybe, just, maybe, nothing, pmap, qed, sym)
\import lect05 (funExt')
\import lect07(Decide, no, yes)
\import lect09
\open LinearOrder

-- 1. Закончите определение \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left a f => idp
  | return-right {A : \Set} (m : Term A) : m >>= return = m \elim m {
    | app m1 m2 => rewrite (return-right m1) $ rewrite (return-right m2) idp
    | lam m => rewrite liftM-return $ pmap lam $ return-right m
    | var _ => idp
    | unit => idp
  }
  | >>=-assoc {A B C : \Set} (m : Term A) (k : A -> Term B) (l : B -> Term C) : (m >>= k) >>= l = m >>= (\lam x => k x >>= l) \elim m {
    | app m1 m2 => rewrite (>>=-assoc m1 k l) $ rewrite (>>=-assoc m2 k l) idp
    | lam m => rewrite (liftM->>= k l) $ pmap lam $ >>=-assoc m (liftM k) (liftM l)
    | var v => idp
    | unit => idp
  }
  \where {
    \func liftM-return {A : \Set} : liftM var = var {Maybe A} => funExt' (\lam a => \case \elim a \with {
      | nothing => idp
      | just _ => idp
    })
    \func liftM-1 {A B C : \Set} (f : A -> B) (k : B -> Term C) : liftM (\lam x => k (f x)) = (\lam x => liftM k (MaybeMonad.fmap f x)) => funExt' (\lam a => \case \elim a \with {
      | nothing => idp
      | just a => idp
    })
    \func termMap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (t : Term A) : termMap g (termMap f t) = termMap (\lam x => g (f x)) t \elim t
      | app t1 t2 => rewrite (termMap-comp f g t1) $ rewrite (termMap-comp f g t2) idp
      | lam t => rewrite (funExt' (MaybeMonad.fmap-comp f g)) $ pmap lam $ termMap-comp (MaybeMonad.fmap f) (MaybeMonad.fmap g) t
      | var v => idp
      | unit => idp

    \func liftM-2 {A B C : \Set} (f : B -> C) (k : A -> Term B) : liftM (\lam x => termMap f (k x)) = (\lam x => termMap (MaybeMonad.fmap f) (liftM k x)) => funExt' (\lam a => \case \elim a \with {
      | nothing => idp
      | just a =>
        liftM (\lam x => termMap f (k x)) (just a) ==< idp >==
        termMap just (termMap f (k a)) ==< termMap-comp f just (k a) >==
        termMap (\lam x => just (f x)) (k a) ==< idp >==
        termMap (\lam x => MaybeMonad.fmap f (just x)) (k a) ==< sym (termMap-comp just (MaybeMonad.fmap f) (k a)) >==
        termMap (MaybeMonad.fmap f) (termMap just (k a)) ==< idp >==
        termMap (MaybeMonad.fmap f) (liftM k (just a)) `qed
    })
    \func termMap->>=-left {A B C : \Set} (f : A -> B) (t : Term A) (k : B -> Term C) : termMap f t >>= k = t >>= (\lam x => k (f x)) \elim t
      | app t1 t2 => rewrite (termMap->>=-left f t1 k) $ rewrite (termMap->>=-left f t2 k) idp
      | lam t => rewrite (liftM-1 f k) $ pmap lam $ termMap->>=-left (MaybeMonad.fmap f) t (liftM k)
      | var v => idp
      | unit => idp

    \func termMap->>= {A B C : \Set} (f : B -> C) (t : Term A) (k : A -> Term B) : termMap f (t >>= k) = t >>= (\lam x => termMap f (k x)) \elim t
      | app t1 t2 => rewrite (termMap->>= f t1 k) $ rewrite (termMap->>= f t2 k) idp
      | lam t => rewrite (liftM-2 f k) $ pmap lam $ termMap->>= (MaybeMonad.fmap f) t (liftM k)
      | var v => idp
      | unit => idp

    \func liftM->>= {A B C : \Set} (k : A -> Term B) (l : B -> Term C) : liftM (\lam x => k x >>= l) = (\lam x => liftM k x >>= liftM l) => funExt' (\lam a => \case \elim a \with {
      | nothing => idp
      | just a =>
        liftM (\lam x => k x >>= l) (just a) ==< idp >==
        termMap just (k a >>= l) ==< termMap->>= just (k a) l >==
        (k a >>= (\lam x => termMap just (l x))) ==< idp >==
        (k a >>= (\lam x => liftM l (just x))) ==< sym (termMap->>=-left just (k a) (liftM l)) >==
        (termMap just (k a) >>= liftM l) ==< idp >==
        (liftM k (just a) >>= liftM l) `qed
    })
  }

-- 2. Определите отношение многошаговой редукции на Term.

\data Red {V : \Set} (t s : Term V) : \Set
  | red-refl (t = s)
  | red-step (\Pi (v : Term V) -> Red1 t v -> Red v s)

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | app (lam t1) t2 => \let
    | s => t1 lect09.TermMonad.>>= maybe t2 var
    \in yes (s, redBeta idp idp)
  | app t1 t2 => \case strategy t1 \with {
    | yes (s, r) => yes (app s t2, appLeft r idp)
    | no nein-left => \case strategy t2 \with {
      | yes (s, r) => yes (app t1 s, appRight idp r)
      | no nein-right => no (\lam (s, r) => no-app nein-left nein-right s r)
    }
  }
  | lam t => \case strategy t \with {
    | yes (s, r) => yes (lam s, redLam r)
    | no nein => no {?}
  }
  | var v => no (\lam (s, r) => \case r)
  | unit => no (\lam (s, r) => \case r)
  \where {
    \func no-app {V : \Set} {t1 t2 : Term V} (nein-left : Utils.Not (\Sigma (s : Term V) (Red1 t1 s))) (nein-right : Utils.Not (\Sigma (s : Term V) (Red1 t2 s))) (s : Term V) (r : Red1 (app t1 t2) s)  : Utils.Empty \elim s, r
      | s, redBeta {g} p p1 => {?}
      | app s1 s2, appLeft r p => nein-left (s1, r)
      | app s1 s2, appRight p r => nein-right (s2, r)
  }

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t
  => {?}

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s
  => {?}

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t
  => {?}

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}

-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (a t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => headApp (HeadRed a t1 s1) (t2 = s2)
  | app t a', s => headBeta {f : Term (Maybe V)} (a = a') (lam f = t) (f >>= maybe a var = s)

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s) (acc : Acc Red1 a) (q : Interp T s) : Interp T t
  => {?}

-- 8. Докажите typeableInterp из лекции