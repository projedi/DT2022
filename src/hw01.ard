-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f : Nat -> Nat) (x : Nat) => f x
\func flip (f : Nat -> Nat -> Nat) (x : Nat) (y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 2 f5 => f1
\func f6 => f4

-- (f1 f2) `f3` (f4 `f5` f6)
\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if' x true y
    \where
      \func if' (cond : Bool) (t f : Bool) : Bool \elim cond
        | true => t
        | false => f

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => (x ^ y) * x

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x => suc x * fac x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) : Nat \elim y
  | zero => 0 -- should be unrepresentable, then?
  | y => mod' x x y -- x is always subtracted by at least 1. So x iterations are enough.
  \where
    \func mod' (s : Nat) (x y : Nat) : Nat \elim s
      | 0 => x
      | suc s => if (y < x) (mod' s (x - y) y) x


\func gcd (x y : Nat) : Nat \elim x, y
  | 0, y => y
  | x, 0 => x
  | x, y => if (x < y) (gcd' (suc x) y x) (gcd' (suc y) x y) -- every step, the second argument of gcd' either gets
                                                             -- smaller by at least 1; or it stays equal, and then it
                                                             -- gets to 0 on the next step. So second argument + 1
                                                             -- iterations are definitely enough.
  \where
    \func gcd' (s : Nat) (x y : Nat) : Nat \elim s
      | 0 => x
      | suc s => \case y \with {
        | 0 => x
        | y => gcd' s y (mod y x)
      }
