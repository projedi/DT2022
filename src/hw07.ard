\import Function.Meta
\import Meta
\import Paths.Meta
\import Utils
\import lect07
\open Nat(+,*)

-- 1. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | :: x _ => in-head (a = x)
  | :: _ xs => in-rec (In a xs)

-- Optional:
-- 2. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'.

\func lessOrEq-1=>2 (n m : Nat) (p : lessOrEq n m) : lessOrEq' n m \with
  | 0, _, _ => ()
  | suc n, 0, (_, ())
  | suc n, suc m, (k, p) => lessOrEq-1=>2 n m (k, pmap pred p)

\func lessOrEq-2=>3 (n m : Nat) (p : lessOrEq' n m) : LessOrEq n m \with
  | 0, _, _ => z<=_
  | suc _, 0, ()
  | suc n, suc m, p => s<=s (lessOrEq-2=>3 n m p)

\func lem-lessOrEq4-suc (n m : Nat) (p : LessOrEq' n m) : LessOrEq' (suc n) (suc m) \with
  | n, m, <=-refl p => <=-refl (pmap suc p)
  | n, suc m, <=-suc p => <=-suc (lem-lessOrEq4-suc n m p)

\func lessOrEq-3=>4 (n m : Nat) (p : LessOrEq n m) : LessOrEq' n m \with
  | 0, 0, _ => <=-refl idp
  | 0, suc m, _ => <=-suc (lessOrEq-3=>4 0 m z<=_)
  | suc _, 0, ()
  | suc n, suc m, s<=s p => lem-lessOrEq4-suc n m (lessOrEq-3=>4 n m p)

\func lessOrEq-4=>1 (n m : Nat) (p : LessOrEq' n m) : lessOrEq n m \with
  | n, m, <=-refl p => (0, sym p)
  | n, suc m, <=-suc p => \case lessOrEq-4=>1 n m p \with {
    | (k, p) => (suc k, pmap suc p)
  }

-- 3. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | reflTransClosure-elem (R x y)
  | reflTransClosure-refl (x = y)
  | reflTransClosure-trans (z : A) (ReflTransClosure R x z) (ReflTransClosure R z y)

-- 4. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func ReflTransClosure-lem-fwd {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y -> ReflTransClosure R x y
  => \lam x y r => reflTransClosure-elem r

\func ReflTransClosure-lem-bwd
  {A : \Type}
  (R : A -> A -> \Type)
  (refl : \Pi (x : A) -> R x x)
  (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  (x y : A)
  (r : ReflTransClosure R x y)
  : R x y \elim r
  | reflTransClosure-elem r => r
  | reflTransClosure-refl p => transport (\lam z => R x z) p (refl x)
  | reflTransClosure-trans z r1 r2 => trans x z y (ReflTransClosure-lem-bwd R refl trans x z r1) (ReflTransClosure-lem-bwd R refl trans z y r2)

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y
  => \lam x y => (ReflTransClosure-lem-fwd R refl trans x y, ReflTransClosure-lem-bwd R refl trans x y)

-- 5. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys".

\data SubList {A : \Type} (xs : List A) (ys : List A) \elim xs, ys
  | nil, _ => subList-nil
  | :: x xs, :: y ys => subList-take (x = y) (SubList xs ys)
  | xs, :: _ ys => subList-drop (SubList xs ys)

-- 6. Докажите, что Sublist (filter p xs) xs для любых p и xs.

\func subList-filter {A : \Type} (p : A -> Bool) (xs : List A) : SubList (filter p xs) xs \elim xs
  | nil => subList-nil
  | :: x xs => cases (p x) \with {
    | true => subList-take idp (subList-filter p xs)
    | false => subList-drop (subList-filter p xs)
  }

-- 7. Определите filter через if, а не через \case.
--     Докажите для этой версии filter лемму filter-lem.

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | :: x xs => if (p x) (x :: filter' p xs) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : LessOrEq (length (filter' p xs)) (length xs) \elim xs
  | nil => z<=_
  | :: x xs => cases (p x) \with {
    | true => s<=s (filter-lem p xs)
    | false => <=-step-lem (filter-lem p xs)
  }

-- 8. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции.

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x
  => \case f true \as b, idp : f true = b, f false \as b', idp : f false = b', \elim x \with {
    | true, p, true, q, true => rewrite p $ rewrite p $ p
    | true, p, true, q, false => rewrite q $ rewrite p $ p
    | true, p, false, q, true => rewrite p $ rewrite p $ p
    | true, p, false, q, false => rewrite q $ rewrite q $ q
    | false, p, true, q, true => rewrite p $ rewrite q $ p
    | false, p, true, q, false => rewrite q $ rewrite p $ q
    | false, p, false, q, true => rewrite p $ rewrite q $ q
    | false, p, false, q, false => rewrite q $ rewrite q $ q
  }

-- 9. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven-0 : isEven 0 => (0, idp)

\func isEven-1 : Not (isEven 1) => \lam i => go i.1 i.2
\where {
  \func go (k : Nat) (p : 1 = 2 * k) : Empty \elim k, p
    | 0, ()
    | suc k, ()
}

\func isEven-sucsuc-fwd (n : Nat) (x : isEven n) : isEven (suc (suc n)) => (suc x.1, pmap suc $ pmap suc $ x.2)

\func isEven-sucsuc-bwd (n : Nat) (x : isEven (suc (suc n))) : isEven n => (pred x.1, lem _ _ $ x.2)
\where {
  \func lem (n : Nat) (k : Nat) (p : suc (suc n) = 2 * k) : n = 2 * pred k \elim k
    | 0 => pmap pred $ pmap pred $ p
    | suc k => pmap pred $ pmap pred $ p
}

\func isEven-dec : DecPred isEven => \lam n => go n
\where {
  \func go (n : Nat) : Decide (isEven n) \elim n
    | 0 => yes isEven-0
    | suc 0 => no isEven-1
    | suc (suc n) => \case (go n) \with {
      | yes ja => yes $ isEven-sucsuc-fwd n ja
      | no nein => no (\lam i => nein $ isEven-sucsuc-bwd n i)
    }
}

-- 10. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => go dec
  \where {
    \func go {A : \Type} (dec : Eq A) (xs : List A) (ys : List A) : Decide (xs = ys) \elim xs, ys
      | nil, nil => yes idp
      | nil, :: y ys => no (\case __)
      | :: x xs, nil => no (\case __)
      | :: x xs, :: y ys => \case dec.decideEq x y, go dec xs ys \with {
        | yes ja, yes da => yes $ rewrite ja $ rewrite da idp
        | yes ja, no net => no (\lam p => net $ pmap (list-rec nil (\lam _ xs _ => xs)) p)
        | no nein, _ => no (\lam p => nein $ pmap (list-rec x (\lam x _ _ => x)) p)
      }
    \func list-rec {A : \Type} {P : \Type} (n : P) (c : A -> List A -> P -> P) (xs : List A) : P \elim xs
      | nil => n
      | :: x xs => c x xs (list-rec n c xs)
  }

-- 11. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => {?}

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P))
  : \Pi (x : A) -> (FromBoolToDec (FromDecToBool P)).1 x <-> P.1 x
  => {?}

-- Optional:
-- 12. Парадокс Рассела показывает, что не существует множества всех множеств.
-- Если такое множеств существует, то мы можем определить множество B, состоящее из множеств, не содержащих себя.
-- Тогда B принадлежит себе тогда и только тогда, когда оно себе не принадлежит.
-- Отсюда следует противоречии.
-- Теорема Кантора утверждает, что не сущесвует множества X с сюръекцией из X в множество подмножеств X.
-- Ее доказательство также конструирует утверждение, которое верно тогда и только тогда, когда оно ложно.
-- Верно, что в общем случае существование такого утверждения влечет противоречие.
-- Это легко доказать при помощи исключенного третьего, но утверждение верно и без него.
-- Докажите этот факт.
\func contrProp {A : \Type} (p : A -> Not A) (q : Not A -> A) : Empty
  => \let
    | a : A => q (\lam a' => p a' a')
    \in p a a
