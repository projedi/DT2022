\import Utils
\import hw01 (gcd)
\import lect05 (funExt')
\import lect06

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair {
    | fst_ => b
    | snd_ => a
  }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => p.p

\func one-isPos : PosNat 1 => \new PosNat {
  | p => ()
}

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\func isCoprime (n m : Nat) : Bool => \case gcd n m \with {
  | 1 => true
  | _ => false
}

\record Coprime (n m : Nat) (p : T (isCoprime n m))

\func Coprime60 (n : Nat) => Coprime n 60

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | id-left {A B : \Set} (a : A) (f : A -> F B) : (return a >>= f) = f a
  | id-right {A : \Set} (a : F A) : (a >>= return) = a
  | >>=-assoc {A B C : \Set} (a : F A) (b : A -> F B) (c : B -> F C) : ((a >>= b) >>= c) = (a >>= \lam x => b x >>= c)
  | fmap f x => x >>= (\lam a => return (f a))
  | fmap-id x => id-right x
  | fmap-comp f g x =>
    fmap (\lam a => g (f a)) x ==< idp >==
    (x >>= \lam a => return (g (f a))) ==< pmap (x >>=) (funExt' (\lam a => sym (id-left (f a) (\lam b => return (g b))))) >==
    (x >>= \lam a => return (f a) >>= (\lam b => return (g b))) ==< sym (>>=-assoc x (\lam a => return (f a)) (\lam a => return (g a))) >==
    ((x >>= (\lam a => return (f a))) >>= (\lam a => return (g a))) ==< idp >==
    fmap g (x >>= (\lam a => return (f a))) ==< idp >==
    fmap g (fmap f x) `qed

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return {A : \Set} (x : A) : Maybe A => just x
  | >>= {A B : \Set} (x : Maybe A) (f : A -> Maybe B) : Maybe B => maybe nothing f x
  | id-left {A B : \Set} (a : A) (f : A -> Maybe B) : (return a >>= f) = f a => idp
  | id-right {A : \Set} (a : Maybe A) : (a >>= return) = a \elim a {
    | nothing => idp
    | just a => idp
  }
  | >>=-assoc {A B C : \Set} (a : Maybe A) (b : A -> Maybe B) (c : B -> Maybe C) : ((a >>= b) >>= c) = (a >>= \lam x => b x >>= c) \elim a {
    | nothing => idp
    | just a => idp
  }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

-- Cannot solve equation \lh <= constant
\instance StateMonad (S : \Type) : Monad (State S) => {?}
-- Cannot solve equation \lh <= constant
\instance StateMonad' (S : \Type) : Monad (\lam a => State S a) => {?}

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

-- Cannot solve equation \lh <= constant
\instance State'Monad (S : \Type) : Monad (State' S) => {?}
-- Cannot solve equation \lh <= constant
\instance State'Monad' (S : \Type) : Monad (\lam a => State' S a) => {?}